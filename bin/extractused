#!/usr/bin/env perl
use strict;
use warnings;
use version;
use Pod::Usage;
use Getopt::Long;
use App::ExtractUsed;
use App::ExtractUsed::Script;

my $args = {
    skip => [],
    dir  => [],
    file => [],
    perl => '',
    list => 0,
    help => 0,
    version => 0,
};

GetOptions($args, qw< skip=s% perl=s dir=s% file=s% list help version >);

if ($args->{help}) {
    pod2usage(1);
} elsif ($args->{version}) {
    print "extractused (App::ExtractUsed) version $App::ExtractUsed::VERSION\n";
    exit;
}

my $script = App::ExtractUsed::Script->new($args);
$script->run;

__END__

=head1 NAME

extractused - CLI tool to extract used modules from your project.

=head1 SYNOPSIS

    $ extractused # is equivalent to "--dir lib --dir t"
    $ extractused --skip YourProject
    $ extractused --file lib/YourProject.pm --skip YourProject

    $ extractused --file write-once.pl --list | cpanm

    $ extractused --help
    $ extractused --version

=head1 OPTIONS

=over 8

=item B<--perl>

the minimum perl version

=item B<--skip>

the namespace that should not be included

=item B<--dir>

directory

=item B<--file>

path to the file

=item B<--list>

Output format for cpanm (or other command)

=item B<--help>

brief help message

=item B<--version>

print version

=back

=head1 DESCRIPTION

B<This program> will read the given input file(s) and do something
useful with the contents thereof.

=cut
