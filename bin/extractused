#!/usr/bin/env perl
use strict;
use warnings;
use version;
use Pod::Usage;
use Getopt::Long;
use App::ExtractUsed;
use App::ExtractUsed::Script;

my $args = {
    skip => [],
    dir  => [],
    file => [],
    perl => '',
    list => 0,
    help => 0,
    version => 0,
};

GetOptions($args, qw< skip=s% perl=s dir=s% file=s% list help version >);

if ($args->{help}) {
    pod2usage(1);
} elsif ($args->{version}) {
    print "extractused (App::ExtractUsed) version $App::ExtractUsed::VERSION\n";
    exit;
}

my $script = App::ExtractUsed::Script->new($args);
$script->run;

__END__

=head1 NAME

extractused - CLI tool to extract used modules from your project.

=head1 SYNOPSIS

    # in your project directory,

    # `extractused` is equivalent to `extractused --dir lib --dir t`

    $ extractused
    requires 'App::ExtractUsed';
    requires 'Module::Extract::Use';
    test_requires 'App::ExtractUsed';
    test_requires 'JSON::PP';

    $ extractused --skip App::ExtractUsed
    requires 'Module::Extract::Use';
    test_requires 'JSON::PP';

    $ extractused --file lib/App/ExtractUsed.pm --skip App::ExtractUsed
    requires 'Module::Extract::Use';

    $ extractused --file bin/extractused --list
    App::ExtractUsed
    App::ExtractUsed::Script

    $ extractused --file write-once.pl --list | cpanm

    $ extractused --help
    $ extractused --version

=head1 DESCRIPTION

B<extractused> will read the given input file(s) and extract C<use>ed and/or C<require>d modules

The final task before make dist is writing deps into C<Makefile.PL>.
But extracting used modules from your project is tedious and painstaking
since we have to recognize what modules are core/non-core modules.

This script helps you to generate C<Makefile.PL>.

=head1 OPTIONS

=over 8

=item B<--perl>

the minimum perl version

=item B<--skip>

the namespace that should not be included

=item B<--dir>

the directory to traverse

=item B<--file>

specify the path to a file

=item B<--list>

Output format for cpanm (or other command).
This option only works with B<--file> option.

=item B<--help>

brief help message

=item B<--version>

print version

=head1 LIMITATION

The performance of this module depends on L<Module::Extract::Use>.

=back

=cut
